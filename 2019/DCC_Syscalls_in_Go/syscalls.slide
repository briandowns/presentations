Using Go to Call Unsupported Syscalls
Desert Code Camp 2019
19 Oct 2019

Brian Downs
@bdowns328
@golangphoenix

# 
# Assess the audiences level of understanding of the flowoing topics:
# 1. Operating Systems
# 2. Syscalls
# 3. FreeBSD / Linux | UNIX
# 4. Go
#

* What is a syscall?

* 

- The word syscall is short for "system call".
- A programmatic entry point into a system, specifically an operating system kernel.
- System calls are a means of abstracting system resources through a well defined interface to code running in userland.
- Generally, operating system developers assign a non-negative integer value to the syscall to identify it.

* Common Syscalls

- open(2), close(2)
- send(2), receive(2)
- fork(2), exec(2)
- chroot(2)

* 

What is the "(2)" at the end of the syscall name?  Manual pages are broken up into sections called levels and syscalls are at level 2.

* Platform Syscalls

- 562 syscalls available on FreeBSD 
- ~313 on Linux

* How does Go handle syscalls?

 package syscall

- Package syscall provides types, functions, and methods for common syscalls across the supported operating systems. 
- These syscalls are wrappers around assembly for their architecture.

* ASM Examples

* Darwin AMD 64

 TEXT	·Syscall(SB),NOSPLIT,$0-56
    CALL	runtime·entersyscall(SB)
    MOVQ	a1+8(FP), DI
    MOVQ	a2+16(FP), SI
    MOVQ	a3+24(FP), DX
    MOVQ	$0, R10
    MOVQ	$0, R8
    MOVQ	$0, R9
    MOVQ	trap+0(FP), AX	// syscall entry
    ADDQ	$0x2000000, AX
    SYSCALL
    JCC	ok
    MOVQ	$-1, r1+32(FP)
    MOVQ	$0, r2+40(FP)
    MOVQ	AX, err+48(FP)
    CALL	runtime·exitsyscall(SB)
    RET
 ok:
    MOVQ	AX, r1+32(FP)
    MOVQ	DX, r2+40(FP)
    MOVQ	$0, err+48(FP)
    CALL	runtime·exitsyscall(SB)
    RET

* Linux AMD 64

 TEXT	·Syscall(SB),NOSPLIT,$0-56
    CALL	runtime·entersyscall(SB)
    MOVQ	a1+8(FP), DI
    MOVQ	a2+16(FP), SI
    MOVQ	a3+24(FP), DX
    MOVQ	$0, R10
    MOVQ	$0, R8
    MOVQ	$0, R9
    MOVQ	trap+0(FP), AX	// syscall entry
    SYSCALL
    CMPQ	AX, $0xfffffffffffff001
    JLS	ok
    MOVQ	$-1, r1+32(FP)
    MOVQ	$0, r2+40(FP)
    NEGQ	AX
    MOVQ	AX, err+48(FP)
    CALL	runtime·exitsyscall(SB)
    RET
 ok:
    MOVQ	AX, r1+32(FP)
    MOVQ	DX, r2+40(FP)
    MOVQ	$0, err+48(FP)
    CALL	runtime·exitsyscall(SB)
    RET

* ? What if they don't?

* FreeBSD

- FreeBSD syscall coverage in Go is sparse. 
- Most IO is covered as well as `kqueue` along with the necssary calls for the runtime. This is usually enough for 99% of what you want to do.

* Unimplemented FreeBSD Syscalls

 jail(2)
 jail_set(2)
 jail_get(2)
 jail_attach(2)
 jail_remove(2)

Using these syscalls we can take a process and lock it into it's own execution space with its own file system resources, and networking.

* Calling an Unimplemented Syscall

* Step 1: 

*

Find the numeric value assigned to that syscall.  

- This can be found here in the syscall table. https://github.com/freebsd/freebsd/blob/master/sys/kern/syscalls.master

* Step 2: 

Remember that the underlying world of operating system development is done in C and curse under your breath.

- Son of a ****!

* Step 3: 

*

Look what data the syscall takes.

From `man 2 jail` we see that the call takes a pointer to a jail structure. 

For more detail we can reference the kernel header files: `sys/param.h` and `sys/jail.h`

 struct jail {
    uint32_t	       version; 
    char		       *path;
    char		       *hostname;
    char		       *jailname;
    unsigned int	   ip4s;
    unsigned int	   ip6s;
    struct in_addr     *ip4;
    struct in6_addr    *ip6;
 };

# A point to take note of is the sizes of C types. We need to use types of the same size and they may not match as we'd expect.

* Step 4: 

*

Recreate Data Structure in Go.

 type jail struct {
    Version  uint32
    Path     uintptr
    Name     uintptr
    Hostname uintptr
    IP4s     uint32
    IP6s     uint32
    IP4      uintptr
    IP6      uintptr
 }

* Step 5: 

Convert Data to Necessary Forms

* 

Convert strings to byte pointers. 

- The syscall package comes with a number of helpful functions to get our Go code into the forms the system will recognize and more likely work with.

 jn, err := syscall.BytePtrFromString("jail_name")
 if err != nil {
    return 0, err
 }
 jp, err := syscall.BytePtrFromString("jail_path")
 if err != nil {
    return 0, err
 }
 hn, err := syscall.BytePtrFromString("jail_hostname")
 if err != nil {
    return 0, err
 }

* 

Next, we need to get the actual memory pointer and assign that to our struct. 

The kernel is mainly implemented in C, with Assember. This code is a port of that kernel code from the man page. Since it's C, ints are 32 bits wide so we need to account for that in our assignments.

# Explain what an unsafe pointer is HERE.
# Explain what an uintptr is HERE.

 j := &jail{
    Version:  uint32(0), 
    Path:     uintptr(unsafe.Pointer(jp)),
    Hostname: uintptr(unsafe.Pointer(hn)),
    Name:     uintptr(unsafe.Pointer(jn)),
    IP4s:     uint32(1),
    IP6s:     uint32(0),
    IP4:      uintptr(unsafe.Pointer(ia)),
 }

* Step 6: Make the System Call

* 

 r1, _, e1 := syscall.Syscall(sysJail, uintptr(unsafe.Pointer(j)), 0, 0)
 if e1 != 0 {
    return 0, fmt.Errorf("%d", e1)
 }

`jail(2)` only returns an int containing the jail ID of the created jail.  However `syscall.Syscall` returns 3 values. 

In our case, the first will be the jail ID, the second will be blank, and an error. The error is pulled from the `ERNNO` value set by the kernel.

* Conclusion

- Writing your own functions and packages to call syscalls is fairly easy with Go.
- A familiarity of your platform's ABI necessary.
- A limited understanding of C is necessary.
- In most cases, you won't even need to do this.

